<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<body>
    {{#ifCond authUser.role.[0] '===' "-1"}}
    <div class="control-responsive p-4 d-flex flex-column">
        <div class="container mt-3">
            <h2 class="mb-4">Xử lí báo cáo</h2>

            <div class="d-flex flex-column mb-4" id="filters-container">
                <div class="row d-flex" id="location-filters">
                    <div class="form-group col-2">
                        <label for="ward">Quận</label>
                        <input type="text" class="form-control" id="district" name="district"
                            value="{{authUser.role.[1]}}" readonly>
                    </div>
                    <div class="form-group col-9 ml-auto">
                        <label for="district">Phường</label>
                        <div id="wardCheckboxes" class="d-flex flex-wrap mt-2">
                            <!-- Checkboxes for wards will be dynamically added here -->
                        </div>
                    </div>
                </div>
                <div class="row d-flex align-items-end" id="email-filter">
                    <div class="form-group col-10">
                        <label for="email">Người gửi</label>
                        <input type="text" class="form-control" id="emailInput"
                            placeholder="Nhập email người gửi báo cáo">
                    </div>
                    <div class="form-group col-2 ml-auto">
                        <label>&nbsp;</label>
                        <button type="button" class="btn btn-outline-primary btn-block float-right"
                            onclick="filterReports()">
                            <i class="bi bi-funnel"></i>
                            Lọc
                        </button>
                    </div>
                </div>
            </div>
            <small class="text-muted">Click đúp vào một dòng để xem thông tin chi tiết và thay đổi tình trạng xử
                lí.</small>
            <div class="d-flex mt-2" id="info-container">
                <div class="table-responsive">
                    <table class="table table-hover" id="reportsTable">
                        <thead>
                            <tr>
                                <th>Thời điểm gửi</th>
                                <th>Địa chỉ Email</th>
                                <th>Tên người gửi</th>
                                <th>Số điện thoại</th>
                                <th>Phường</th>
                                <th>Quận</th>
                                <th>Địa chỉ</th>
                                <th>Tình trạng</th>
                                <th>Cách xử lí</th>
                            </tr>
                        </thead>
                        <tbody id="reportsBody">
                            <!-- Reports will be dynamically added here -->
                        </tbody>
                    </table>
                </div>

                <!-- Modal for detailed information -->
                <div class="modal fade" id="detailsModal" tabindex="-1" role="dialog" aria-labelledby="info-modal-title"
                    aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="info-modal-title">Chi tiết báo cáo</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <div id="modalContent">
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-outline-success" data-dismiss="modal">
                                    <i class="bi bi-skip-backward-fill"></i>
                                    Quay lại
                                </button>
                                <button class="btn btn-outline-primary" id="saveButton">
                                    <i class="bi bi-check2"></i>
                                    Lưu
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
    </div>

    <script>
        toastr.options.closeButton = true;
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-center",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "300",
            "timeOut": "2000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }

        document.addEventListener('DOMContentLoaded', async function () {
            var disId = document.getElementById('district').value;

            // Fetch disName
            try {
                const disResponse = await fetch(`https://map-application-officer.vercel.app//api/district/getDisById/${disId}`);
                const disData = await disResponse.json();

                // Assuming the response data structure includes disName property
                var disName = disData.data.disName;

                // Set the value of the district input field
                document.getElementById('district').value = disName;
            } catch (error) {
                console.error('Error fetching district data:', error);
            }

            loadWards(disName);

            // Call filterReports after fetching ward and district values
            filterReports();

        });

        async function loadWards(disName) {
            const wardCheckboxesContainer = document.getElementById('wardCheckboxes');
            wardCheckboxesContainer.innerHTML = '';

            try {
                const wardsResponse = await fetch(`https://map-application-officer.vercel.app//api/ward/getWard/${disName}`);
                const wardsData = await wardsResponse.json();

                if (wardsData.status === 'OK') {
                    const wards = wardsData.data;

                    // Add checkboxes for each ward
                    wards.forEach(ward => {
                        const checkboxDiv = document.createElement('div');
                        checkboxDiv.classList.add('form-check', 'mr-3');

                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.classList.add('form-check-input');
                        checkbox.id = `wardCheckbox_${ward.wardName}`;
                        checkbox.value = ward.wardName;
                        checkbox.name = 'wardCheckbox';

                        const label = document.createElement('label');
                        label.classList.add('form-check-label');
                        label.setAttribute('for', `wardCheckbox_${ward.wardName}`);
                        label.textContent = ward.wardName;

                        checkboxDiv.appendChild(checkbox);
                        checkboxDiv.appendChild(label);

                        wardCheckboxesContainer.appendChild(checkboxDiv);
                    });
                } else {
                    toastr.error(`Error loading wards: ${wardsData.message}`);
                }
            } catch (error) {
                console.error('Error fetching ward data:', error);
            }
        }

        async function filterReports() {
            const wardSelect = document.getElementById('ward');
            const districtSelect = document.getElementById('district');
            const emailInput = document.getElementById('emailInput');

            const wardInput = Array.from(document.querySelectorAll('input[name="wardCheckbox"]:checked'))
                .map(checkbox => checkbox.value);
            const districtInput = districtSelect.value;
            const emailInputValue = emailInput.value.trim();

            // Array to store promises for each ward API call
            const apiPromises = [];

            if (wardInput.length === 0 || wardInput.includes('')) {
                // If no ward is selected, fetch reports for all wards
                const url = 'https://map-application-officer.vercel.app//api/report/getAllReport';
                const promise = fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'OK') {
                            return data.data;
                        } else {
                            throw new Error(`Error: ${data.message}`);
                        }
                    });

                apiPromises.push(promise);
            } else {
                // Handle the case when one or more wards are selected
                wardInput.forEach(ward => {
                    let url;

                    if (districtInput && emailInputValue) {
                        url = `https://map-application-officer.vercel.app//api/report/getReportByWardAndDisAndEmail/${ward}/${districtInput}/${emailInputValue}`;
                    } else if (districtInput) {
                        url = `https://map-application-officer.vercel.app//api/report/getReportByWardAndDis/${ward}/${districtInput}`;
                    } else if (emailInputValue) {
                        url = `https://map-application-officer.vercel.app//api/report/getReportByWardAndEmail/${ward}/${emailInputValue}`;
                    }

                    const promise = fetch(url)
                        .then(response => response.json())
                        .then(data => {
                            if (data.status === 'OK') {
                                return data.data;
                            } else {
                                throw new Error(`Error for ward ${ward}: ${data.message}`);
                            }
                        });

                    apiPromises.push(promise);
                });
            }

            try {
                // Wait for all API calls to complete
                const results = await Promise.all(apiPromises);

                // Combine the results into a single array
                const combinedData = [].concat(...results);

                // Display the combined data
                displayReports(combinedData);
            } catch (error) {
                toastr.error(`Error fetching data: ${error.message}`);
            }
        }

        function formatTimestamp(timestamp) {
            const date = new Date(timestamp);
            const formattedDate = date.toLocaleString(); // Adjust the formatting as needed
            return formattedDate;
        }

        async function displayReports(reports) {
            const reportsBody = document.getElementById('reportsBody');
            reportsBody.innerHTML = '';

            if (reports.length === 0) {
                // If no data, create a single row with a "No data" message
                const noDataRow = document.createElement('tr');
                const noDataCell = document.createElement('td');
                noDataCell.setAttribute('colspan', '9'); // Set colspan to cover all columns
                noDataCell.textContent = 'Không có dữ liệu';
                noDataRow.appendChild(noDataCell);
                reportsBody.appendChild(noDataRow);
            } else {
                // If there is data, create rows for each report
                reports.forEach(report => {
                    const row = document.createElement('tr');

                    row.innerHTML = `
                <td>${formatTimestamp(report.createdAt)}</td>
                <td>${report.email}</td>
                <td data-tooltip="${report.name}">${report.name}</td>
                <td>${report.phone}</td>
                <td>${report.ward}</td>
                <td>${report.district}</td>
                <td data-tooltip="${report.address}">${report.address}</td>
                <td style="color: ${getColorByState(report.state)}">${formatState(report.state)}</td>
                <td style="color: ${getColorByAction(report.actionHandler)}">${report.actionHandler}</td>
            `;

                    row.addEventListener('dblclick', () => {
                        loadDetails(report);
                        $('#detailsModal').modal('show');
                    });

                    row.addEventListener('click', () => highlightRow(row));

                    reportsBody.appendChild(row);
                });
            }
        }

        function getColorByState(state) {
            switch (state) {
                case 0:
                    return 'red';
                case 1:
                    return 'gold';
                case 2:
                    return 'green';
                default:
                    return 'black';
            }
        }

        function getColorByAction(actionHandler) {
            switch (actionHandler) {
                case 'Chưa xử lí':
                    return 'red';
                default:
                    return 'green';
            }
        }

        function formatState(state) {
            switch (state) {
                case 0:
                    return 'Chưa xử lí';
                case 1:
                    return 'Đang xử lí';
                case 2:
                    return 'Đã xử lí';
                default:
                    return 'Unknown';
            }
        }

        function loadDetails(report) {
            document.getElementById('modalContent').innerHTML = "";

            let imgDivs = "";

            if (report.reportPicture.length === 2) {
                imgDivs += `<img class="img-fluid" src="https://map-application-officer.vercel.app//api/reportImg/getImgReport/${report.reportPicture[0]}" alt=""><br>
                    <img class="img-fluid" src="https://map-application-officer.vercel.app//api/reportImg/getImgReport/${report.reportPicture[1]}" alt=""><br><br>`;
            } else if (report.reportPicture.length === 1) {
                imgDivs += `<img class="img-fluid" src="https://map-application-officer.vercel.app//api/reportImg/getImgReport/${report.reportPicture[0]}" alt=""><br><br>`;
            }

            const details = `<h6 class="card-subtitle mb-2 text-muted">${report.address}</h6>
                      <p class="card-text">
                          <div id="reportId">ID report: <b>${report._id}</b><br></div>
                          Họ tên người gửi: <b>${report.name}</b><br>
                          Email: <b>${report.email}</b><br>
                          Số điện thoại: <b>${report.phone}</b><br>
                          Hình thức báo cáo: <b>${report.reportType}</b><br>
                          Nội dung: ${report.content}
                          Hình ảnh đối tượng báo cáo:</strong><br><br>
                          ${imgDivs}
                          <br>
                          ${report.state === 2 ? `Tình trạng xử lí: <b style="color:green">Đã xử lí</b><br>
                                                    Hình thức xử lí: <b>${report.actionHandler}</b></p>` :
                    `<div class="form-group">
                            <label for="statusSelect">Tình trạng xử lí</label>
                            <select class="custom-select" id="statusSelect">
                                <option value="0" ${report.state === 0 ? 'selected' : ''}>Chưa xử lí</option>
                                <option value="1" ${report.state === 1 ? 'selected' : ''}>Đang xử lí</option>
                                <option value="2" ${report.state === 2 ? 'selected' : ''}>Đã xử lí xong</option>
                            </select>
                          </div>
                          <div class="form-group">
                            <label for="handlingMethodInput">Hình thức xử lí</label>
                            <input type="text" class="form-control overflow-auto" id="handlingMethodInput" value="${report.actionHandler}">
                          </div>`}
                      </p>`;


            document.getElementById('modalContent').innerHTML = details;

            if (report.state === 2) {
                document.getElementById('saveButton').style.display = "none";
            }
            else {
                document.getElementById('saveButton').style.display = "block";
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const saveButton = document.getElementById('saveButton');

            if (saveButton) {
                saveButton.addEventListener('click', sendPutRequest);
            }

        });

        async function sendPutRequest(event) {
            const reportIdElement = document.getElementById('reportId');
            const reportIdText = reportIdElement.innerText.trim();

            // Check if the reportIdText contains "ID report:"
            if (reportIdText.startsWith('ID report:')) {
                // Extract only the ID part
                const reportId = reportIdText.replace('ID report:', '').trim();
                console.log(reportId)
                const statusSelect = document.getElementById('statusSelect');
                const handlingMethodInput = document.getElementById('handlingMethodInput');

                const newState = statusSelect.value;
                const newAction = handlingMethodInput.value;

                const updateData = {
                    state: newState,
                    actionHandler: newAction
                };

                try {
                    const response = await fetch(`https://map-application-officer.vercel.app//api/report/updateReport/${reportId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(updateData),
                    });

                    const data = await response.json();

                    if (data.status === 'OK') {
                        toastr.options.onHidden = () => { window.location.href = "/api/controlReport" }
                        toastr.success("Cập nhật thành công.")
                    } else {
                        toastr.error("Cập nhật thất bại.");
                    }
                } catch (error) {
                    console.error('Error updating report:', error);
                }

                // Close the modal after updating
                $('#detailsModal').modal('hide');
            } else {
                // If the format is different, log the entire content
                console.log(reportIdText);
            }
        }

        function highlightRow(row) {
            // Remove highlight from all rows
            const rows = document.querySelectorAll('#reportsBody tr');
            rows.forEach(r => r.classList.remove('highlighted'));

            // Add highlight to the clicked row
            row.classList.add('highlighted');
        }

    </script>
    {{else}}
    <div class="control-responsive p-4 d-flex flex-column align-items-center">
        <div class="container mt-3">
            <h2 class="mb-4">Xử lí báo cáo</h2>

            <div class="d-flex justify-content-between align-items-end mb-4" id="filters-container">
                <div class="row flex-fill mr-3" id="filters">
                    <div class="form-group col-3">
                        <label for="district">Phường</label>
                        <input type="text" class="form-control" id="ward" name="ward" value="{{authUser.role.[0]}}"
                            readonly>
                    </div>
                    <div class="form-group col-3">
                        <label for="ward">Quận</label>
                        <input type="text" class="form-control" id="district" name="district"
                            value="{{authUser.role.[1]}}" readonly>
                    </div>
                    <div class="form-group col-6">
                        <label for="email">Người gửi</label>
                        <input type="text" class="form-control" id="emailInput"
                            placeholder="Nhập email người gửi báo cáo">
                    </div>
                </div>
                <div class="form-group ml-auto">
                    <label>&nbsp;</label>
                    <button type="button" class="btn btn-outline-primary float-right" onclick="filterReports()">
                        <i class="bi bi-funnel"></i>
                        Lọc
                    </button>
                </div>
            </div>

            <div class="d-flex" id="info-container">

                <div class="table-responsive">
                    <table class="table table-hover" id="reportsTable">
                        <thead>
                            <tr>
                                <th>Thời điểm gửi</th>
                                <th>Địa chỉ Email</th>
                                <th>Tên người gửi</th>
                                <th>Số điện thoại</th>
                                <th>Phường</th>
                                <th>Quận</th>
                                <th>Địa chỉ</th>
                                <th>Tình trạng</th>
                                <th>Cách xử lí</th>
                            </tr>
                        </thead>
                        <tbody id="reportsBody">
                            <!-- Reports will be dynamically added here -->
                        </tbody>
                    </table>
                </div>

                <!-- Modal for detailed information -->
                <div class="modal fade" id="detailsModal" tabindex="-1" role="dialog" aria-labelledby="info-modal-title"
                    aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="info-modal-title">Chi tiết báo cáo</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <div id="modalContent">
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-outline-success" data-dismiss="modal">
                                    <i class="bi bi-skip-backward-fill"></i>
                                    Quay lại
                                </button>
                                <button class="btn btn-outline-primary" id="saveButton">
                                    <i class="bi bi-check2"></i>
                                    Lưu
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
    </div>

    <script>
        toastr.options.closeButton = true;
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-center",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "300",
            "timeOut": "2000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }

        document.addEventListener('DOMContentLoaded', async function () {
            // Replace wardId and disId with actual values or variables
            var wardId = document.getElementById('ward').value;
            var disId = document.getElementById('district').value;

            // Fetch wardName
            try {
                const wardResponse = await fetch(`https://map-application-officer.vercel.app//api/ward/getWardById/${wardId}`);
                const wardData = await wardResponse.json();

                // Assuming the response data structure includes wardName property
                var wardName = wardData.data.wardName;

                // Set the value of the ward input field
                document.getElementById('ward').value = wardName;
            } catch (error) {
                console.error('Error fetching ward data:', error);
            }

            // Fetch disName
            try {
                const disResponse = await fetch(`https://map-application-officer.vercel.app//api/district/getDisById/${disId}`);
                const disData = await disResponse.json();

                // Assuming the response data structure includes disName property
                var disName = disData.data.disName;

                // Set the value of the district input field
                document.getElementById('district').value = disName;
            } catch (error) {
                console.error('Error fetching district data:', error);
            }

            // Call filterReports after fetching ward and district values
            filterReports();
        });

        async function filterReports() {
            const wardSelect = document.getElementById('ward');
            const districtSelect = document.getElementById('district');
            const emailInput = document.getElementById('emailInput');

            const wardInput = wardSelect.value;
            const districtInput = districtSelect.value;
            const emailInputValue = emailInput.value.trim();

            let url;

            if (wardInput && districtInput && emailInputValue) {
                url = `https://map-application-officer.vercel.app//api/report/getReportByWardAndDisAndEmail/${wardInput}/${districtInput}/${emailInputValue}`;
            } else if (wardInput && districtInput) {
                url = `https://map-application-officer.vercel.app//api/report/getReportByWardAndDis/${wardInput}/${districtInput}`;
            } else if (districtInput) {
                url = `https://map-application-officer.vercel.app//api/report/getReportByDis/${districtInput}`;
            } else if (emailInputValue) {
                url = `https://map-application-officer.vercel.app//api/report/getReportByEmail/${emailInputValue}`;
            }

            try {
                const response = await fetch(url);
                const data = await response.json();

                if (data.status === 'OK') {
                    displayReports(data.data);
                } else {
                    toastr.error(`Error: ${data.message}`);
                }
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }

        function formatTimestamp(timestamp) {
            const date = new Date(timestamp);
            const formattedDate = date.toLocaleString(); // Adjust the formatting as needed
            return formattedDate;
        }

        async function displayReports(reports) {
            const reportsBody = document.getElementById('reportsBody');
            reportsBody.innerHTML = '';

            if (reports.length === 0) {
                // If no data, create a single row with a "No data" message
                const noDataRow = document.createElement('tr');
                const noDataCell = document.createElement('td');
                noDataCell.setAttribute('colspan', '9'); // Set colspan to cover all columns
                noDataCell.textContent = 'Không có dữ liệu';
                noDataRow.appendChild(noDataCell);
                reportsBody.appendChild(noDataRow);
            } else {
                // If there is data, create rows for each report
                reports.forEach(report => {
                    const row = document.createElement('tr');

                    row.innerHTML = `
                <td>${formatTimestamp(report.createdAt)}</td>
                <td>${report.email}</td>
                <td data-tooltip="${report.name}">${report.name}</td>
                <td>${report.phone}</td>
                <td>${report.ward}</td>
                <td>${report.district}</td>
                <td data-tooltip="${report.address}">${report.address}</td>
                <td style="color: ${getColorByState(report.state)}">${formatState(report.state)}</td>
                <td style="color: ${getColorByAction(report.actionHandler)}">${report.actionHandler}</td>
            `;

                    row.addEventListener('dblclick', () => {
                        loadDetails(report);
                        $('#detailsModal').modal('show');
                    });

                    row.addEventListener('click', () => highlightRow(row));

                    reportsBody.appendChild(row);
                });
            }
        }

        function getColorByState(state) {
            switch (state) {
                case 0:
                    return 'red';
                case 1:
                    return 'gold';
                case 2:
                    return 'green';
                default:
                    return 'black';
            }
        }

        function getColorByAction(actionHandler) {
            switch (actionHandler) {
                case 'Chưa xử lí':
                    return 'red';
                default:
                    return 'green';
            }
        }

        function formatState(state) {
            switch (state) {
                case 0:
                    return 'Chưa xử lí';
                case 1:
                    return 'Đang xử lí';
                case 2:
                    return 'Đã xử lí';
                default:
                    return 'Unknown';
            }
        }

        function loadDetails(report) {
            document.getElementById('modalContent').innerHTML = "";

            let imgDivs = "";

            if (report.reportPicture.length === 2) {
                imgDivs += `<img class="img-fluid" src="https://map-application-officer.vercel.app//api/reportImg/getImgReport/${report.reportPicture[0]}" alt=""><br>
                    <img class="img-fluid" src="https://map-application-officer.vercel.app//api/reportImg/getImgReport/${report.reportPicture[1]}" alt=""><br><br>`;
            } else if (report.reportPicture.length === 1) {
                imgDivs += `<img class="img-fluid" src="https://map-application-officer.vercel.app//api/reportImg/getImgReport/${report.reportPicture[0]}" alt=""><br><br>`;
            }

            const details = `<h6 class="card-subtitle mb-2 text-muted">${report.address}</h6>
                      <p class="card-text">
                          <div id="reportId">ID report: <b>${report._id}</b><br></div>
                          Họ tên người gửi: <b>${report.name}</b><br>
                          Email: <b>${report.email}</b><br>
                          Số điện thoại: <b>${report.phone}</b><br>
                          Hình thức báo cáo: <b>${report.reportType}</b><br>
                          Nội dung: ${report.content}
                          Hình ảnh đối tượng báo cáo:</strong><br><br>
                          ${imgDivs}
                          <br>
                          ${report.state === 2 ? `Tình trạng xử lí: <b style="color:green">Đã xử lí</b><br>
                                                    Hình thức xử lí: <b>${report.actionHandler}</b></p>` :
                    `<div class="form-group">
                            <label for="statusSelect">Tình trạng xử li</label>
                            <select class="custom-select" id="statusSelect">
                                <option value="0" ${report.state === 0 ? 'selected' : ''}>Chưa xử lí</option>
                                <option value="1" ${report.state === 1 ? 'selected' : ''}>Đang xử lí</option>
                                <option value="2" ${report.state === 2 ? 'selected' : ''}>Đã xử lí xong</option>
                            </select>
                          </div>
                          <div class="form-group">
                            <label for="handlingMethodInput">Hình thức xử li</label>
                            <input type="text" class="form-control overflow-auto" id="handlingMethodInput" value="${report.actionHandler}">
                          </div>`}
                      </p>`;

            document.getElementById('modalContent').innerHTML = details;

            if (report.state === 2) {
                document.getElementById('saveButton').style.display = "none";
            }
            else {
                document.getElementById('saveButton').style.display = "block";
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const saveButton = document.getElementById('saveButton');

            if (saveButton) {
                saveButton.addEventListener('click', sendPutRequest);
            }

        });

        async function sendPutRequest(event) {
            const reportIdElement = document.getElementById('reportId');
            const reportIdText = reportIdElement.innerText.trim();

            // Check if the reportIdText contains "ID report:"
            if (reportIdText.startsWith('ID report:')) {
                // Extract only the ID part
                const reportId = reportIdText.replace('ID report:', '').trim();

                const statusSelect = document.getElementById('statusSelect');
                const handlingMethodInput = document.getElementById('handlingMethodInput');

                const newState = statusSelect.value;
                const newAction = handlingMethodInput.value;

                const updateData = {
                    state: newState,
                    actionHandler: newAction
                };

                try {
                    const response = await fetch(`https://map-application-officer.vercel.app//api/report/updateReport/${reportId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(updateData),
                    });

                    const data = await response.json();

                    if (data.status === 'OK') {
                        toastr.options.onHidden = () => { window.location.href = "/api/controlReport" }
                        toastr.success("Cập nhật thành công.")
                    } else {
                        toastr.error("Cập nhật thất bại.");
                    }
                } catch (error) {
                    console.error('Error updating report:', error);
                }

                // Close the modal after updating
                $('#detailsModal').modal('hide');
            } else {
                // If the format is different, log the entire content
                console.log(reportIdText);
            }
        }

        function highlightRow(row) {
            // Remove highlight from all rows
            const rows = document.querySelectorAll('#reportsBody tr');
            rows.forEach(r => r.classList.remove('highlighted'));

            // Add highlight to the clicked row
            row.classList.add('highlighted');
        }

    </script>
    {{/ifCond}}

</body>

</html>