<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        .tox-statusbar__path-item {
            display: none !important;
        }
    </style>
</head>

<body>
    {{#if point}}
    <input type="hidden" id="point-id" value="{{point}}">
    {{/if}}
    {{#if panel}}
    <input type="hidden" id="panel-id" value="{{panel}}">
    {{/if}}
    <input type="hidden" id="user-id" value="{{authUser._id}}">
    <div class="control-responsive p-4 d-flex flex-column align-items-center">
        <div class="container mt-3">
            <h2 class="mb-4">Gửi yêu cầu chỉnh sửa</h2>
            <form action="" method="post" enctype="multipart/form-data">
                <div class="form-group mt-4">
                    <label for="point">Email cán bộ gửi yêu cầu</label>
                    <input class="form-control" type="email" name="email" id="email" value="{{authUser.email}}"
                        readonly>
                </div>
                <h5 class="my-4">Đối tượng cần chỉnh sửa</h5>
                <div class="form-group">
                    <label for="point">Điểm đặt</label>
                    <input class="form-control" type="text" name="point" id="point" readonly>
                </div>
                {{#ifCond panel '!=' "-1"}}
                <div class="form-group">
                    <label for="point">Bảng quảng cáo</label>
                    <input class="form-control" type="text" name="panel" id="panel" readonly>
                </div>
                {{/ifCond}}
                <h5 class="mt-4 mb-2">Nội dung cần chỉnh sửa</h5>
                <small class="text-muted">Chọn một hoặc nhiều nội dung cần chỉnh sửa.</small>
                {{#ifCond panel '==' "-1"}}
                <div class="row mt-4">
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="group0Checkbox">
                                <label class="form-check-label mb-2" for="group0Checkbox">Loại vị trí</label>
                            </div>
                            <select class="custom-select" name="positionType" id="group0" disabled>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="group1Checkbox">
                                <label class="form-check-label mb-2" for="group1Checkbox">Hình thức quảng
                                    cáo</label>
                            </div>
                            <select class="custom-select" name="billboardType" id="group1" disabled>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="group2Checkbox">
                                <label class="form-check-label mb-2" for="group2Checkbox">Trạng thái quy
                                    hoạch</label>
                            </div>
                            <select class="custom-select" name="isZoning" id="group2" disabled>
                            </select>
                        </div>
                    </div>
                </div>
                {{else}}
                <div class="row mt-4">
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="group0Checkbox">
                                <label class="form-check-label mb-2" for="group0Checkbox">Loại bảng quảng
                                    cáo</label>
                            </div>
                            <select class="custom-select" name="Paneltype" id="group0" disabled>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="group1Checkbox">
                                <label class="form-check-label mb-2" for="group1Checkbox">Số lượng</label>
                            </div>
                            <input type="text" class="form-control" name="amount" id="group1" disabled>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="group2Checkbox">
                                <label class="form-check-label mb-2" for="group2Checkbox">Kích thuớc (m)</label>
                            </div>
                            <div class="d-flex" id="size-inputs">
                                <input type="text" class="form-control mr-3" name="width" id="group2-1" disabled>
                                <span class="mt-2 mr-3">x</span>
                                <input type="text" class="form-control mr-3" name="height" id="group2-2" disabled>
                            </div>
                        </div>
                    </div>
                </div>
                {{/ifCond}}
                <div class="form-group">
                    <label for="reason">Lí do yêu cầu chỉnh sửa</label>
                    <input class="form-control" type="text" name="reason" id="reason">
                </div>
                <br>
                <button type="button" class="btn btn-outline-success" onclick="window.history.back()">
                    <i class="bi bi-skip-backward-fill"></i>
                    &nbsp;Quay lại
                </button>
                <button type="submit" id="send-button" class="btn btn-outline-primary">
                    <i class="bi bi-check2"></i>
                    &nbsp;Gửi yêu cầu</button>
            </form>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
        let pointId = document.getElementById("point-id").value;
        let panelId = document.getElementById("panel-id").value;

        // TODO: delete this after this page is finished
        document.getElementById("point").value = pointId;

        // TODO: delete this after this page is finished
        if (panelId != "-1") {
            document.getElementById("panel").value = panelId;
        }


        toastr.options.closeButton = true;
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-center",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "300",
            "timeOut": "2000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }

        // enable inputs corresponding to checkboxes
        $('#group0Checkbox').change(function () {
            $('#group0').prop('disabled', !this.checked);
            $('#group0').focus();
        });

        $('#group1Checkbox').change(function () {
            $('#group1').prop('disabled', !this.checked);
            $('#group1').focus();
        });

        if (panelId != "-1") {
            $('#group2Checkbox').change(function () {
                $('#group2-1').prop('disabled', !this.checked);
                $('#group2-2').prop('disabled', !this.checked);
                $('#group2-1').focus();
            });
        } else {
            $('#group2Checkbox').change(function () {
                $('#group2').prop('disabled', !this.checked);
                $('#group2').focus();
            });
        }

        // handle user errors
        document.addEventListener('DOMContentLoaded', async function () {
            let point;
            let panel;
            let adForms;
            let panelTypes;
            let posTypes;

            await fetch(`https://map-application-officer.vercel.app//api/point/getPoint/${pointId}`)
                .then(response => response.json())
                .then(data => {
                    point = data.data;
                });

            document.getElementById("point").value = point.address.trim() + ", " + point.area.ward + ", " + point.area.district;

            if (panelId != "-1") {
                await fetch(`https://map-application-officer.vercel.app//api/panel/getPanelById/${panelId}`)
                    .then(response => response.json())
                    .then(data => {
                        panel = data.data;
                    });

                document.getElementById("panel").value = panel.Paneltype + " (" + panel._id + ")";

                // fetch panel types
                await fetch(`https://map-application-officer.vercel.app//api/panelType/getAllPanelType`)
                    .then(response => response.json())
                    .then(data => {
                        panelTypes = data.data;

                        let selectHtml = "";

                        panelTypes.forEach(type => {
                            if (type.panName == panel.Paneltype) {
                                selectHtml += `<option selected value=${encodeURIComponent(type.panId)}>${type.panName}</option>`;
                            }
                            else {
                                selectHtml += `<option value=${encodeURIComponent(type.panId)}>${type.panName}</option>`;
                            }
                        });

                        let dimensions = panel.size.match(/\d+(\.\d+)?/g);

                        document.getElementById("group0").innerHTML = selectHtml;
                        document.getElementById("group1").value = panel.amount;
                        document.getElementById("group2-1").value = dimensions[0];
                        document.getElementById("group2-2").value = dimensions[1];
                    });
            } else {
                // fetch position types
                await fetch(`https://map-application-officer.vercel.app//api/positionType/getAllTypePos`)
                    .then(response => response.json())
                    .then(data => {
                        posTypes = data.data;

                        let selectHtml = "";

                        posTypes.forEach(type => {
                            if (type.posName == point.positionType) {
                                selectHtml += `<option selected value=${encodeURIComponent(type.posId)}>${type.posName}</option>`;
                            }
                            else {
                                selectHtml += `<option value=${encodeURIComponent(type.posId)}>${type.posName}</option>`;
                            }

                        });

                        document.getElementById("group0").innerHTML = selectHtml;
                    });

                // fetch ad types
                await fetch(`https://map-application-officer.vercel.app//api/adsForm/getAllForm`)
                    .then(response => response.json())
                    .then(data => {
                        adForms = data.data;

                        let selectHtml = "";

                        adForms.forEach(form => {
                            if (form.formName == point.formAdvertising) {
                                selectHtml += `<option selected value=${encodeURIComponent(form.formId)}>${form.formName}</option>`;
                            }
                            else {
                                selectHtml += `<option value=${encodeURIComponent(form.formId)}>${form.formName}</option>`;
                            }

                        });

                        document.getElementById("group1").innerHTML = selectHtml;
                    });

                let zoneHtml;

                if (point.isZoning == true) {
                    zoneHtml = `<option selected value="true">Đã quy hoạch</option>
                                <option value="false">Chưa quy hoạch</option>`;
                }
                else {
                    zoneHtml = `<option value="true">Đã quy hoạch</option>
                                <option selected value="false">Chưa quy hoạch</option>`;
                }

                document.getElementById("group2").innerHTML = zoneHtml;
            }

            const postContent = async (event) => {
                event.preventDefault();

                if (panelId == "-1") {
                    // point modification
                    const posType = $('#group0');
                    const bbType = $('#group1');
                    const zoneState = $('#group2');
                    const reasonInput = $('#reason');

                    if ($('.form-check-input:checked').length === 0) {
                        toastr.error("Vui lòng chọn ít nhất một nội dung cần chỉnh sửa.");
                    }
                    else if (!reasonInput.val()) {
                        toastr.error("Vui lòng điền lí do cần chỉnh sửa.");

                        reasonInput.addClass('border-danger');
                        reasonInput.focus();
                    }
                    else if ($('#group0Checkbox').prop('checked') && decodeURIComponent($('#group0').val()) == point.positionType) {
                        toastr.error("Vui lòng thay đổi loại vị trí của điểm đặt.");

                        let inputs = [bbType, zoneState, reasonInput];

                        inputs.forEach(input => {
                            input.removeClass('border-danger');
                        });

                        posType.addClass('border-danger');
                        posType.focus();
                    }
                    else if ($('#group1Checkbox').prop('checked') && decodeURIComponent($('#group1').val()) == point.formAdvertising) {
                        toastr.error("Vui lòng thay đổi hình thức quảng cáo của điểm đặt.");

                        let inputs = [posType, zoneState, reasonInput];

                        inputs.forEach(input => {
                            input.removeClass('border-danger');
                        });

                        bbType.addClass('border-danger');
                        bbType.focus();
                    }
                    else if ($('#group2Checkbox').prop('checked') && (($('#group2').val().toLowerCase() === "true") === point.isZoning)) {
                        toastr.error("Vui lòng thay đổi trạng thái quy hoạch của điểm đặt.");

                        let inputs = [posType, bbType, reasonInput];

                        inputs.forEach(input => {
                            input.removeClass('border-danger');
                        });

                        zoneState.addClass('border-danger');
                        zoneState.focus();
                    }
                    else {
                        let inputs = [posType, bbType, zoneState, reasonInput];

                        inputs.forEach((input) => {
                            input.removeClass('border-danger');
                        });

                        // prepare body to send POST request
                        let changedList = [];
                        let group0 = "-1";
                        let group1 = "-1";
                        let group2 = "-1";

                        if ($('#group0Checkbox').prop('checked')) {
                            let oldValue;

                            posTypes.forEach(type => {
                                if (type.posName == point.positionType) {
                                    oldValue = type.posId;
                                }
                            });

                            group0 = {
                                oldValue: oldValue,
                                newValue: decodeURIComponent($('#group0').val())
                            }
                        }

                        if ($('#group1Checkbox').prop('checked')) {
                            let oldValue;

                            adForms.forEach(form => {
                                if (form.formName == point.formAdvertising) {
                                    oldValue = form.formId;
                                }
                            });

                            group1 = {
                                oldValue: oldValue,
                                newValue: decodeURIComponent($('#group1').val())
                            }
                        }

                        if ($('#group2Checkbox').prop('checked')) {
                            group2 = {
                                oldValue: point.isZoning,
                                newValue: Boolean($('#group2').val())
                            }
                        }

                        changedList.push(group0);
                        changedList.push(group1);
                        changedList.push(group2);

                        const response = await fetch('https://map-application-officer.vercel.app//api/modification/createModification', {
                            method: 'POST',
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                idPoint: pointId,
                                idPanel: panelId,
                                idUser: $('#user-id').val(),
                                reason: $('#reason').val(),
                                changedList: changedList
                            })
                        })

                        if (response.status === 200) {
                            toastr.options.onHidden = () => { window.location.href = "/api/wardStatistics" }
                            toastr.success("Yêu cầu đã được gửi thành công.")
                        } else {
                            toastr.error("Có lỗi xảy ra. Vui lòng thử lại sau.");
                        }
                    }
                }
                else {
                    // panel modification
                    const panTypeInput = $('#group0');
                    const amountInput = $('#group1');
                    const widthInput = $('#group2-1');
                    const heightInput = $('#group2-2');
                    const reasonInput = $('#reason');

                    let dimensions = panel.size.match(/\d+(\.\d+)?/g);

                    if ($('.form-check-input:checked').length === 0) {
                        toastr.error("Vui lòng chọn ít nhất một nội dung cần chỉnh sửa.");
                    }
                    else if (($('#group1Checkbox').prop('checked') && !amountInput.val()) || ($('#group2Checkbox').prop('checked') && (!widthInput.val() || !heightInput.val())) || !reasonInput.val()) {
                        toastr.error("Vui lòng điền đầy đủ thông tin.");

                        if ($(`#group1Checkbox`).prop('checked') && !amountInput.val()) {
                            amountInput.addClass('border-danger');
                            amountInput.focus();
                        }
                        else if (!$(`#group1Checkbox`).prop('checked') || ($(`#group1Checkbox`).prop('checked') && amountInput.val())) {
                            amountInput.removeClass('border-danger');
                        }

                        let sizeInputs = [widthInput, heightInput];

                        sizeInputs.forEach((input) => {
                            if ($(`#group2Checkbox`).prop('checked')) {
                                if (!input.val()) {
                                    input.addClass('border-danger');
                                    input.focus();
                                }
                                else {
                                    input.removeClass('border-danger');
                                }
                            }
                            else if (!$(`#group2Checkbox`).prop('checked')) {
                                input.removeClass('border-danger');
                            }
                        });

                        if (!reasonInput.val()) {
                            reasonInput.addClass('border-danger');
                        }
                        else {
                            reasonInput.removeClass('border-danger');
                        }
                    }
                    else if ($('#group0Checkbox').prop('checked') && decodeURIComponent($('#group0').val()) == panel.Paneltype) {
                        toastr.error("Vui lòng thay đổi loại bảng quảng cáo.");

                        let inputs = [amountInput, widthInput, heightInput, reasonInput];

                        inputs.forEach(input => {
                            input.removeClass('border-danger');
                        });

                        panTypeInput.addClass('border-danger');
                        panTypeInput.focus();
                    }
                    else if ($('#group1Checkbox').prop('checked') && $('#group1').val() == panel.amount) {
                        toastr.error("Vui lòng thay đổi số lượng bảng quảng cáo.");

                        let inputs = [panTypeInput, widthInput, heightInput, reasonInput];

                        inputs.forEach(input => {
                            input.removeClass('border-danger');
                        });

                        amountInput.addClass('border-danger');
                        amountInput.focus();
                    }
                    else if ($('#group2Checkbox').prop('checked') && ($('#group2-1').val() == dimensions[0] && $('#group2-2').val() == dimensions[1])) {
                        toastr.error("Vui lòng thay đổi kích thước bảng quảng cáo.");

                        let inputs = [panTypeInput, amountInput, reasonInput];

                        inputs.forEach(input => {
                            input.removeClass('border-danger');
                        });

                        widthInput.addClass('border-danger');
                        heightInput.addClass('border-danger');
                        widthInput.focus();
                    }
                    else {
                        let inputs = [panTypeInput, amountInput, widthInput, heightInput, reasonInput];

                        inputs.forEach((input) => {
                            input.removeClass('border-danger');
                        });

                        // prepare body to send POST request#
                        let changedList = [];
                        let group0 = "-1";
                        let group1 = "-1";
                        let group2 = "-1";

                        if ($('#group0Checkbox').prop('checked')) {
                            let oldValue;

                            panelTypes.forEach(type => {
                                if (type.panName == panel.Paneltype) {
                                    oldValue = type.panId;
                                }
                            });

                            group0 = {
                                oldValue: oldValue,
                                newValue: decodeURIComponent($('#group0').val())
                            }
                        }

                        if ($('#group1Checkbox').prop('checked')) {
                            group1 = {
                                oldValue: panel.amount,
                                newValue: Integer.parseInt($('#group1').val())
                            }
                        }

                        if ($('#group2Checkbox').prop('checked')) {
                            group2 = {
                                oldValue: panel.size,
                                newValue: $('#group2-1').val() + "m x " + $('#group2-2').val() + "m"
                            }
                        }

                        changedList.push(group0);
                        changedList.push(group1);
                        changedList.push(group2);

                        const response = await fetch('https://map-application-officer.vercel.app//api/modification/createModification', {
                            method: 'POST',
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                idPoint: pointId,
                                idPanel: panelId,
                                idUser: $('#user-id').val(),
                                reason: $('#reason').val(),
                                changedList: changedList
                            })
                        })

                        if (response.status === 200) {
                            toastr.options.onHidden = () => { window.location.href = "/api/wardStatistics" }
                            toastr.success("Yêu cầu đã được gửi thành công.")
                        } else {
                            toastr.error("Có lỗi xảy ra. Vui lòng thử lại sau.");
                        }
                    }
                }
            };

            // Add click event listeners to buttons
            const sendButton = document.getElementById('send-button');

            if (sendButton) {
                sendButton.addEventListener('click', postContent);
            }
        });

    </script>
</body>

</html>